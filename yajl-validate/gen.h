#ifndef __GEN_H__
#define __GEN_H__

#include <ctype.h>

#define GEN_HEADER(__f, __comment)                              \
do {                                                            \
  fprintf (__f,                                                 \
  "/* This file is autogenerated, do not edit it manually,\n"   \
  "   but edit the `%s' instead.\n"                             \
  "\n"                                                          \
  "   The file was generated on %s\n"                           \
  "\n"                                                          \
  "\n"                                                          \
  "%s.  */\n"                                                   \
  "\n"                                                          \
  "\n",                                                         \
  __FILE__, __DATE__, __comment);                               \
} while (0)

#define GEN_HEADER_H(__f, __protector, __comment)               \
do {                                                            \
  GEN_HEADER (__f, __comment);                                  \
  fprintf (__f,                                                 \
  "#ifndef %s\n"                                                \
  "#define %s\n"                                                \
  "\n"                                                          \
  "\n",                                                         \
   __protector, __protector);                                   \
} while (0)


#define GEN_FOOTER_H(__f, __protector)                            \
  fprintf (__f,                                                 \
  "#endif // %s\n", __protector)


#define GEN_OPEN_FILE(__f, __fname)                             \
do {                                                            \
  if (!(__f = fopen (__fname, "w")))                            \
    {                                                           \
      warn ("failed to open file `%s' for writing", __fname);   \
      return false;                                             \
    }                                                           \
} while (0)


#define GEN_FLUSH_AND_CLOSE(__f)                                \
do {                                                            \
  if (0 != fflush (__f)) err_func (fflush);                     \
  if (0 != fclose (f)) err_func (fclose);                       \
} while (0)


static inline char *
string_tolower (const char *  s)
{
  char *  x = strdup (s);
  for (size_t i = 0; i < strlen (x); i++)
    x[i] = (char) tolower (x[i]);

  return x;
}

static inline char *
string_toupper (const char *  s)
{
  char *  x = strdup (s);
  for (size_t i = 0; i < strlen (x); i++)
    x[i] = (char) toupper (x[i]);

  return x;
}


bool gen_types_trav_h (yajl_val traversals, const char *  fname);
bool gen_types_nodetype_h (yajl_val nodes, const char *  fname);
bool gen_traverse_tables_h (yajl_val nodes, yajl_val traversals, const char *  fname);
bool gen_traverse_tables_c (yajl_val nodes, yajl_val traversals, const char *  fname);
bool gen_traverse_helper_c (yajl_val nodes, const char *  fname);
bool gen_sons_h (yajl_val nodes, const char *  fname);
bool gen_node_info_mac (yajl_val nodes, const char *  fname);
bool gen_free_node_h (yajl_val nodes, const char *  fname);
bool gen_attribs_h (yajl_val nodes, const char *  fname);
bool gen_node_alloc_h (yajl_val nodes, const char *  fname);
bool gen_node_basic_h (yajl_val nodes, const char *  fname);
bool gen_free_attribs_h (const char *  fname);
bool gen_check_reset_h (const char *  fname);
bool gen_check_node_h (const char *  fname);
bool gen_check_h (const char *  fname);
bool gen_node_basic_c (yajl_val nodes, yajl_val nodesets, const char *  fname);
bool gen_free_node_c (yajl_val nodes, const char *  fname);
bool gen_check_reset_c (yajl_val nodes, const char *  fname);
bool gen_check_nodes_c (yajl_val nodes, const char *  fname);
bool gen_check_c (yajl_val nodes, yajl_val nodesets, const char *  fname);

bool gen_serialize_attribs_h (const char *  fname);
bool gen_serialize_node_h (const char *  fname);
bool gen_serialize_link_h (const char *  fname);
    

#endif // __GEN_H__
